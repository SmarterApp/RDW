# Annotated configuration for RDW Admin Service.
#
# The spring application name is rdw-reporting-admin-service so this file should be named
# rdw-reporting-admin-service when served by the configuration server.
#
# Properties that have a reasonable default value are commented out.
# Other properties are not commented out and must be provided.

# The actuator end-point is on a different port with no security because it is
# expected to be exposed only in a private subnet.
management:
#  port: 8008
#  security:
#    enabled: false

# Archive configuration
# Student group upload payloads are archived. Although the location may be a local file system the
# preferred solution is to write to AWS S3, which requires credentials. For S3, the root should be
# the protocol and the bucket, e.g. s3://my-archive-bucket. The AWS access key should be for a
# programmatic AWS user. The secret key should be encrypted. The bucket should be in the same
# region as the deployment (to reduce costs). The path prefix is for tenant configuration and
# should not be set in the base application yaml file.
# There are no default values for these properties and they must be provided.
archive:
  uri-root:
  #path-prefix:
  s3-access-key:
  s3-secret-key:
  s3-region-static: us-west-2
  s3-sse:

# Common settings. Normally set in application.yml.
#reporting:
#  school-year: 2019
#  state:
#    code: CA
#    name: California

# Server configuration.
# Use the defaults unless you really know what you're doing.
server:
#  tomcat:
#    max-connections: 0
#    max-threads: 4
#    accept-count: 10
#  compression:
#    enabled: true
#    mime-types: application/json,application/xml,text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,text/csv

# Datasource configuration.
datasources:
  # NOTE: this section changed between 1.3 and 1.4.
  # Use defaults for most of the settings, except url-server, username and password.
  # The url-server should be set to the host and port, e.g. localhost:3306 or
  # my-cluster.cluster-cimuvo5urx1e.us-west-2.rds.amazonaws.com:3306.
  reporting_ro:
#    url-parts:
#      protocol: "jdbc:mysql:"
#      hosts: "${datasources.reporting_ro.url-server:localhost:3306}"
#      database: "${datasources.reporting_ro.url-schema:reporting}"
#      properties: "useSSL=${datasources.reporting_ro.use-ssl:false}\
#                   &useLegacyDatetimeCode=${datasources.reporting_ro.use-legacy-datetime-code:false}\
#                   &characterEncoding=${datasources.reporting_ro.character-encoding:utf8}\
#                   &rewriteBatchedStatements=${datasources.reporting_ro.rewrite-batched-statements:true}\
#                   &connectTimeout=${datasources.reporting_ro.connect-timeout:10000}\
#                   &socketTimeout=${datasources.reporting_ro.socket-timeout:40000}\
#                   "
#    url: "${datasources.reporting_ro.url-parts.protocol}//${datasources.reporting_ro.url-parts.hosts}/${datasources.reporting_ro.url-parts.database}?${datasources.reporting_ro.url-parts.properties}"
#    jdbcInterceptors: "QueryTimeoutInterceptor(queryTimeout=${datasources.reporting_ro.query-timeout:30})"
    url-server:
    username:
    password:
#    testWhileIdle: true
#    validationQuery: SELECT 1
#    validationQueryTimeout: 10000
#    driverClassName: com.mysql.jdbc.Driver
#    initialize: false
#    initialSize: 4
#    maxActive: 10
#    minIdle: ${datasources.reporting_ro.initialSize}
#    maxIdle: ${datasources.reporting_ro.maxActive}
#    removeAbandoned: false
#    removeAbandonedTimeout: 60
#    logAbandoned: false

  warehouse_rw:
#    url-parts:
#      #This is the generic format of the connection URL protocol//[hosts][/database][?properties]
#      protocol: "jdbc:mysql:"
#      hosts: "${datasources.warehouse_rw.url-server:localhost:3306}"
#      database: "${datasources.warehouse_rw.url-schema:warehouse}"
#      properties: "useSSL=${datasources.warehouse_rw.use-ssl:false}\
#                   &useLegacyDatetimeCode=${datasources.warehouse_rw.use-legacy-datetime-code:false}\
#                   &characterEncoding=${datasources.warehouse_rw.character-encoding:utf8}\
#                   &connectTimeout=${datasources.warehouse_rw.connect-timeout:10000}\
#                   &socketTimeout=${datasources.warehouse_rw.socket-timeout:70000}\
#                   "
#    url: "${datasources.warehouse_rw.url-parts.protocol}//${datasources.warehouse_rw.url-parts.hosts}/${datasources.warehouse_rw.url-parts.database}?${datasources.warehouse_rw.url-parts.properties}"
#    jdbcInterceptors: "QueryTimeoutInterceptor(queryTimeout=${datasources.warehouse_rw.query-timeout:60})"
    url-server:
    username:
    password:
#    testWhileIdle: true
#    validationQuery: SELECT 1
#    validationQueryTimeout: 10000
#    driverClassName: com.mysql.jdbc.Driver
#    initialize: false
#    initialSize: 4
#    maxActive: 10
#    minIdle: ${datasources.warehouse_rw.initialSize}
#    maxIdle: ${datasources.warehouse_rw.maxActive}
#    removeAbandoned: false
#    removeAbandonedTimeout: 60
#    logAbandoned: false

# Spring application configuration
spring:
  # HTTP configuration. The default values for this should be good.
#  http:
#    multipart:
#      max-file-size: 500MB
#      max-request-size: 500MB

  # RabbitMQ configuration.
  # There are no default values. The host must be set based on the orchestration environment
  # e.g. rabbit-service, with appropriate username and password. The password should be encrypted.
  rabbitmq:
    host:
    username:
    password:
