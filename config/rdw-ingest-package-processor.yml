# Annotated configuration for RDW Package Processor
#
# The spring application name is rdw-ingest-package-processor so this file should be named
# rdw-ingest-package-processor.yml when served by the configuration server.
#
# Properties that have a reasonable default value are commented out.
# Other properties are not commented out and must be provided.

# Archive configuration
# The package processor expect subject definition payloads to be archived rather than
# transmitted in the ingest message. Although archiving may be done in a local file system
# during development, the preferred solution is to use AWS S3 to provide the same archive to
# both the import-service and the package-processor.  AWS S3 requires credentials.
# For S3, the root should be the protocol and the bucket, e.g. s3://my-archive-bucket.
# The AWS access key should be for a programmatic AWS user. The secretKey should be encrypted.
# The bucket should be in the same region as the deployment (to reduce costs).
# There are no default values for these properties and they must be provided.
archive:
  root:
  cloud:
    aws:
      credentials:
        accessKey:
        secretKey:
      region:
        auto: false
        static: us-west-2

# The actuator end-point is on a different port with no security because it is expected to be
# exposed only in a private subnet. Use the default settings unless you really know what you
# are doing.
management:
#  security:
#    enabled: false
server:
#  port: 8008
#  tomcat:
#    max-connections: 2
#    max-threads: 2

# Spring application configuration.
spring:
  # Datasource configuration.
  # NOTE: this section changed between 1.0 and 1.1.
  # Use defaults for most of the settings except server, username and password.
  # The url-server should be set to the host and port, e.g. localhost:3306 or
  # my-cluster.cluster-cimuvo5urx1e.us-west-2.rds.amazonaws.com:3306.
  # The password should be encrypted.
  datasource:
#    url: "\
#      jdbc:mysql://${spring.datasource.url-server:localhost:3306}/${spring.datasource.url-schema:warehouse}\
#      ?useSSL=${spring.datasource.use-ssl:false}\
#      &useLegacyDatetimeCode=${spring.datasource.use-legacy-datetime-code:false}\
#      &characterEncoding=${spring.datasource.character-encoding:utf8}\
#      &rewriteBatchedStatements=${spring.datasource.rewrite-batched-statements:true}\
#      &noAccessToProcedureBodies=${spring.datasource.no-access-to-procedure-bodies:true}\
#      &connectTimeout=${spring.datasource.connect-timeout:10000}\
#      &socketTimeout=${spring.datasource.socket-timeout:130000}\
#      "
#    jdbcInterceptors: "QueryTimeoutInterceptor(queryTimeout=${spring.datasource.query-timeout:120})"
    url-server:
    username:
    password:
#    testWhileIdle: true
#    validationQuery: SELECT 1
#    validationQueryTimeout: 10000
#    driverClassName: com.mysql.jdbc.Driver
#    initialize: false
#    maxActive: 10
#    initialSize: 4

  # RabbitMQ configuration.
  # There are no default values. The host must be set based on the orchestration environment
  # e.g. rabbit-service, with appropriate username and password. The password should be encrypted.
  rabbitmq:
    host:
    username:
    password:

# SBAC assessment validation settings.
# These are used to do basic validation of assessments and test results.
# The default settings should be good.
#validation:
#  scaleScore:
#    min: 1500
#    max: 3500
#  thetaScore:
#    min: -5
#    max: 5
#  itemScore:
#    min: -1
#    max: 20
