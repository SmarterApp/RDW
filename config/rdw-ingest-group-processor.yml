# Annotated configuration for the RDW Group Processor.
#
# The spring application name is rdw-ingest-group-processor so this file should be
# named rdw-ingest-group-processor.yml when served by the configuration server.
#
# Properties that have a reasonable default value are commented out.
# Other properties are not commented out and must be provided.

# Archive configuration
# The group processor expects the student group payload to be archived and uses the database's
# native ability to directly load content from the archive. Although archiving may be done in a
# local file system the preferred solution is to use AWS S3, which requires credentials.
# For S3, the root should be the protocol and the bucket, e.g. s3://my-archive-bucket.
# The AWS access key should be for a programmatic AWS user. The secret key should be encrypted.
# The bucket should be in the same region as the deployment (to reduce costs). The path prefix is
# for tenant configuration and should not be set in the base application yaml file.
# There are no default values for these properties and they must be provided.
archive:
  uri-root:
  #path-prefix:
  s3-access-key:
  s3-secret-key:
  s3-region-static: us-west-2
  s3-sse:

# The actuator end-point is on a different port with no security because it is expected to be
# exposed only in a private subnet. Use the default settings unless you really know what you
# are doing.
management:
#  security:
#    enabled: false
server:
#  port: 8008
#  tomcat:
#    max-connections: 2
#    max-threads: 2

# Datasource configuration.
# Use defaults for most of the settings, except server, username and password.
# The url-server should be set to the host and port, e.g. localhost:3306 or
# my-cluster.cluster-cimuvo5urx1e.us-west-2.rds.amazonaws.com:3306.
datasources:
  warehouse_rw:
#    url-parts:
#      protocol: "jdbc:mysql:"
#      hosts: "${datasources.warehouse_rw.url-server:localhost:3306}"
#      database: "${datasources.warehouse_rw.url-schema:warehouse}"
#      properties: "useSSL=${datasources.warehouse_rw.use-ssl:false}\
#                   &useLegacyDatetimeCode=${datasources.warehouse_rw.use-legacy-datetime-code:false}\
#                   &characterEncoding=${datasources.warehouse_rw.character-encoding:utf8}\
#                   &rewriteBatchedStatements=${datasources.warehouse_rw.rewrite-batched-statements:true}\
#                   &sessionVariables=${datasources.warehouse_rw.session-variables:group_concat_max_len=10000}\
#                   &connectTimeout=${datasources.warehouse_rw.connect-timeout:10000}\
#                   &socketTimeout=${datasources.warehouse_rw.socket-timeout:310000}\
#                   "
#    url: "${datasources.warehouse_rw.url-parts.protocol}//${datasources.warehouse_rw.url-parts.hosts}/${datasources.warehouse_rw.url-parts.database}?${datasources.warehouse_rw.url-parts.properties}"
#    jdbcInterceptors: "QueryTimeoutInterceptor(queryTimeout=${datasources.warehouse_rw.query-timeout:300})"
    url-server:
    username:
    password:
#    testWhileIdle: true
#    validationQuery: SELECT 1
#    validationQueryTimeout: 10000
#    driverClassName: com.mysql.jdbc.Driver
#    initialize: false
#    initialSize: 4
#    maxActive: 10
#    minIdle: ${datasources.warehouse_rw.initialSize}
#    maxIdle: ${datasources.warehouse_rw.maxActive}
#    maxWait: 10000
#    removeAbandoned: false
#    removeAbandonedTimeout: 60
#    logAbandoned: false

# Spring application configuration.
spring:
  # RabbitMQ configuration.
  # There are no default values. The host must be set based on the orchestration environment
  # e.g. rabbit-service, with appropriate username and password. The password should be encrypted.
  rabbitmq:
    host:
    username:
    password:
